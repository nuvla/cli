# Manually trigger version bump of NuvlaEdge

name: Bump NuvlaEdge version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SemVer type of version bump: major / minor / patch'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: SetUp python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Load cached poetry
        uses: actions/cache@v2.1.6
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Bump version
        id: versioning
        run: |
          echo "OLD_VERSION=$(poetry version -s)" >> "$GITHUB_OUTPUT"
          poetry version ${{ github.event.inputs.version }}
          echo "NEW_VERSION=$(poetry version -s)" >> "$GITHUB_OUTPUT"
          poetry lock

      - name: Generate ChangeLog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: "CHANGELOG.md"
          futureRelease: "${{ steps.versioning.outputs.NEW_VERSION }}"

      - name: Generate new Tag
        run: |
          git config --global user.email "nuvlaedge-bot@sixsq.com"
          git config --global user.name "nuvlaedge-bot"
          git add poetry.lock pyproject.toml CHANGELOG.md
          git commit -m "Update ChangeLog for release ${{ steps.versioning.outputs.NEW_VERSION }}"
          git push origin main
          git tag "${{ steps.versioning.outputs.NEW_VERSION }}" -m "Nuvla CLI release version ${{ steps.versioning.outputs.NEW_VERSION }}"
          git push origin --tags

      - name: Build library
        id: build
        run: |
          poetry build --no-interaction

      - name: Publish package
        run: |
          poetry config repositories.nuvla-cli https://pypi.org/project/nuvla-cli/
          poetry config pypi-token.pypi ${{ secrets.PYPI_NUVLA_CLI_TOKEN }}
          poetry publish

      - name: Release package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Releasing NuvlaEdge version ${{ steps.versioning.outputs.NEW_VERSION }}"
          gh release create ${{ github.ref }} --generate-notes ./dist/*